{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","handleText","e","setState","target","value","handleCheckbox","handleDate","handleClick","length","props","add","alert","maxDate","this","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","task","active","important","finishDate","style","color","change","delete","finish","toLocaleDateString","TaskList","tasks","filter","done","sort","a","b","toLowerCase","activeTasks","map","key","doneTasks","fontSize","App","counter","deleteTask","changeTaskStatus","forEach","getTime","addTask","prevState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ca9f6c32.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './AddTask.css';\r\n\r\n\r\nclass AddTask extends Component {\r\n\r\n    minDate = new Date().toISOString().slice(0, 10)\r\n    state = {\r\n        text: '',\r\n        checked: false,\r\n        date: this.minDate\r\n    }\r\n\r\n    handleText = (e) => {\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n    }\r\n    handleCheckbox = (e) => {\r\n        this.setState({\r\n            checked: e.target.checked\r\n        })\r\n    }\r\n\r\n\r\n    handleDate = (e) => {\r\n        this.setState({\r\n            date: e.target.value\r\n        })\r\n    }\r\n\r\n\r\n    handleClick = () => {\r\n\r\n        const { text, checked, date } = this.state;\r\n        if (text.length > 2) {\r\n            const add = this.props.add(text, date, checked)\r\n\r\n            if (add) {\r\n                this.setState({\r\n                    text: '',\r\n                    checked: false,\r\n                    date: this.minDate,\r\n                })\r\n            }\r\n        } else { alert(\"za krótka nazwa\") }\r\n    }\r\n\r\n    render() {\r\n        let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n        maxDate = maxDate + \"-12-31\"\r\n        return (\r\n            <div className=\"form\">\r\n                <input type=\"text\" placeholder=\"dodaj zadanie\" value={this.state.text} onChange={this.handleText} />\r\n                <input type=\"checkbox\" checked={this.state.checked} id=\"important\" onChange={this.handleCheckbox} />\r\n                <label htmlFor=\"important\">Priorytet</label><br />\r\n                <label htmlFor=\"date\">Do kiedy zrobić</label>\r\n                <input type=\"date\" value={this.state.date} min={this.minDate} max={maxDate} onChange={this.handleDate} />\r\n                <br />\r\n                <button onClick={this.handleClick}>Dodaj</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTask;","import React from 'react';\r\n\r\nconst Task = (props) => {\r\n\r\n    const style = {\r\n        color: 'red',\r\n\r\n    }\r\n\r\n\r\n    const { text, date, id, active, important, finishDate } = props.task;\r\n\r\n    if (active) {\r\n\r\n\r\n\r\n        return (\r\n            <div>\r\n                <p>\r\n                    <strong style={important ? style : null}>{text}</strong> - do <span>{date} </span>\r\n                    <button onClick={() => props.change(id)}>Zostało zrobione</button>\r\n                    <button onClick={() => props.delete(id)}>X</button>\r\n\r\n                </p>\r\n\r\n            </div>\r\n        );\r\n    } else {\r\n\r\n        const finish = new Date(finishDate).toLocaleDateString()\r\n        return (\r\n            <div>\r\n                <p>\r\n                    <strong>{text}</strong><em> (zrobić do {date})</em><br />\r\n                    - potwierdzenie wykonania<span> {finish} </span>\r\n\r\n                    <button onClick={() => props.delete(id)}>X</button>\r\n\r\n                </p>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Task;","import React from 'react';\r\nimport Task from './Task'\r\n\r\n\r\nconst TaskList = (props) => {\r\n\r\n    const active = props.tasks.filter(task => task.active === true);\r\n    const done = props.tasks.filter(task => !task.active);\r\n\r\n    // done.sort((a, b) => b.finishDate - a.finishDate)\r\n    if (done.length >= 2) {\r\n        done.sort((a, b) => {\r\n            if (a.finishDate < b.finishDate) {\r\n                return 1\r\n            }\r\n            if (a.finishDate > b.finishDate) {\r\n                return -1\r\n            }\r\n            return 0\r\n        })\r\n    }\r\n\r\n    if (active.length >= 2) {\r\n        active.sort((a, b) => {\r\n\r\n            a = a.text.toLowerCase();\r\n            b = b.text.toLowerCase();\r\n\r\n            if (a < b) return -1;\r\n            if (a > b) return 1;\r\n            return 0\r\n        })\r\n    }\r\n\r\n    const activeTasks = active.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change} />)\r\n\r\n    const doneTasks = done.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change} finishDate={props.finishDate} />)\r\n\r\n    return (\r\n        <>\r\n            <div className=\"active\">\r\n                <h1>Zadania do zrobienia</h1>\r\n                {activeTasks.length > 0 ? activeTasks : <p>brak zadań</p>}\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <div className=\"done\">\r\n                <h3>Zadania zrobiene <em>({done.length})</em></h3>\r\n\r\n                {done.length > 5 && <span style={{ fontSize: \"10px\" }}>wyświetlonych jest jedynie 5 ostatnich zadań</span>}\r\n                {doneTasks.slice(0, 5)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TaskList;","import React, { Component } from 'react';\nimport './App.css';\nimport AddTask from './AddTask'\nimport TaskList from './TaskList'\n\nclass App extends Component {\n\n  counter = 0\n\n  state = {\n    tasks: []\n\n\n  }\n\n  deleteTask = (id) => {\n    //1 option\n\n    // const tasks = [...this.state.tasks];\n    // const index = tasks.findIndex(task => task.id === id);\n    // tasks.splice(index, 1)\n    // this.setState({\n    //   tasks\n    // })\n\n    // 2 option\n\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter(task => task.id !== id)\n    this.setState({\n      tasks\n    })\n  }\n\n  changeTaskStatus = (id) => {\n    const tasks = [...this.state.tasks];\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime()\n      }\n    })\n    this.setState({\n      tasks\n    })\n  }\n\n  addTask = (text, date, important) => {\n    const task = {\n      id: this.counter,\n      text, // text from input\n      date, // text from input\n      important, // value from input\n      active: true,\n      finishDate: null,\n    }\n\n    this.counter++;\n\n\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task]\n    }))\n    return true\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>TODO APP</h1>\n        <AddTask add={this.addTask} />\n        <TaskList tasks={this.state.tasks} delete={this.deleteTask} change={this.changeTaskStatus} finishDate={this.state.tasks.finishDate} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}